#!/bin/bash
# Cargamos la configuracion
CONFIG_PATHS="/etc/hpqc/hpqc.config ~/.hpqc/hpqc.config ./hpqc.config"
for file in ${CONFIG_PATHS}; do
	expanded_file=$(bash -c "echo $file")
	[ -f ${expanded_file} ] && . $expanded_file
done
#PLUGIN_PATH="/home/laparca/projects/bash-hpqc/usr/share/hpqc/plugins"

# Look for views in
function getView
{
	VIEW=$1
	for path in ${VIEW_PATH}; do
		expanded_path=$(bash -c "echo $path")
		if [ -f "${expanded_path}/${VIEW}.view" ]; then
			RESULT="${expanded_path}/${VIEW}.view"
		fi
	done

	echo ${RESULT}
}

function getSearch
{
	SEARCH=$1
	for path in ${SEARCH_PATH}; do
		expanded_path=$(bash -c "echo $path")
		if [ -f "${expanded_path}/${SEARCH}.search" ]; then
			RESULT="${expanded_path}/${SEARCH}.search"
		fi
	done

	echo ${RESULT}
}

function getFilter
{
	FILTER=$1
	for path in ${FILTER_PATH}; do
		expanded_path=$(bash -c "echo $path")
		if [ -f "${expanded_path}/${FILTER}.xsl" ]; then
			RESULT="${expanded_path}/${FILTER}.xsl"
		fi
	done

	echo ${RESULT}
}

function getPlugin
{
	PLUGIN=$1
	for path in ${PLUGIN_PATH}; do
		expanded_path=$(bash -c "echo $path")
		if [ -f "${expanded_path}/hpqc-${PLUGIN}" ]; then
			RESULT="${expanded_path}/hpqc-${PLUGIN}"
		fi
	done

	echo ${RESULT}
}

function downloadEntities
{
	local TMP_FILE
	local URL
	local ENTITIES_FILES
	local DOWNLOADED
	local PAGES
	local PAGE
	local TOTAL_RESULT

	URL=$1
	TMP_FILE=$(mktemp /tmp/entities_donload.XXXXXXXXXX)
	ENTITIES_FILES=

	curl -D ${HEAD} --cookie ${COOKIES} --cookie-jar ${COOKIES} -g "${URL}" > ${TMP_FILE}
	ENTITIES_FILES="${ENTITIES_FILES} ${TMP_FILE}"

	# Test if we have to paginate
	TOTAL_RESULT=$(xsltproc $(getFilter total_results) ${TMP_FILE} | tail -n 1)
	if [ $TOTAL_RESULT -gt $MAX_DEFECTS ]; then
		DOWNLOADED=${MAX_DEFECTS}
	else
		DOWNLOADED=${TOTAL_RESULT}
	fi

	PAGES=$((${TOTAL_RESULT} / ${MAX_DEFECTS}))
	if [ $((${TOTAL_RESULT} % ${MAX_DEFECTS})) != 0 ]; then
		PAGES=$(($PAGES + 1))
	fi

	PAGE=1
	while [ ${PAGE} -lt ${PAGES} ]; do
		TMP_FILE=$(mktemp /tmp/entities_donload.XXXXXXXXXX)
		curl -D ${HEAD} --cookie ${COOKIES} --cookie-jar ${COOKIES} -g "${URL}&start-index=$(( ${PAGE} * ${MAX_DEFECTS} ))" > ${TMP_FILE}
		ENTITIES_FILES="${ENTITIES_FILES} ${TMP_FILE}"
		(( PAGE ++ ))
	done

	echo -n "<?xml version='1.0' encoding='UTF-8' standalone='yes'?><Entities TotalResults='${TOTAL_RESULT}'>"
	for file in ${ENTITIES_FILES}; do
		sed 's/..xml version=.1.0. encoding=.UTF-8. standalone=.yes...//;s/.Entities TotalResults=.[0-9]*.>//;s/<\/Entities>//' $file
		rm $file
	done
	echo "</Entities>"
}


function __help {
	echo "HPQC Linux Command Line Tool"
	echo "$0 [herramienta [parametros]]"
	echo

	for path in ${PLUGIN_PATH}; do
		expanded_path="$(bash -c "echo $path")"
		pushd "$expanded_path" > /dev/null
		(for plugin in hpqc-*; do
			. "$plugin"
			echo -n "   ${plugin/hpqc-/}|"
			help 2
		done) | column -s'|' -t
		popd > /dev/null
	done
}

if [ -z "$1" ]; then
	__help
	exit 0
fi

case "$1" in
	help)
		__help
		exit 0
		;;

	--commands)
		# Para cargar la lista de comando para autocompletado
		shift
		PLUGIN=$1
		shift
		plugin=$(getPlugin ${PLUGIN})
		. ${plugin}
		help 1 "$@"
		;;

	*)
		PLUGIN=$1
		shift
		plugin=$(getPlugin ${PLUGIN})
		if [ -z "${plugin}" ]; then
			echo "Debe asignar un plugin adecuado"
			exit 1
		fi
	
		. ${plugin}
	   call "$@"
	   ;;
esac
